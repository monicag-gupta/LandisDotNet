Microsoft.EntityFrameworkCore.SqlServer : version 5.0.17
Microsoft.EntityFrameworkCore.Tools : version 5.0.17


Models.EmployeeEF.cs

using System.ComponentModel.DataAnnotations;

namespace WebApplication4.Models
{
    public class EmployeeEF
    {
        [Key]
        public int id { get; set; }
        [Required(ErrorMessage = "Required Name")]
        public string name { get; set; }
        public int salary { get; set; }
    }
}





Models.EmployeeEFContext.cs



using Microsoft.EntityFrameworkCore;

namespace WebApplication4.Models
{
    public class EmployeeEFContext : DbContext
    {
        public EmployeeEFContext()
        {
        }
        public EmployeeEFContext(DbContextOptions<EmployeeEFContext> options): base(options)
        {
        }
        public DbSet<EmployeeEF> EmployeeEFs { get; set; }
    }
}





Add in appSettings.json:

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "EmpCon": "Data Source = DESKTOP-62JHJ6O\\SQLEXPRESS; Initial Catalog = training; Integrated Security = True"
  }
}






In startup.cs modify the function:

using Day28EFPrj.Models;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Day28EFPrj
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            string conStr = Configuration.GetConnectionString("EmpCon");
            services.AddDbContext<EmployeeEFContext>(options => options.UseSqlServer(conStr));

            services.AddControllersWithViews();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
            else
            {
                app.UseExceptionHandler("/Home/Error");
            }
            app.UseStaticFiles();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllerRoute(
                    name: "default",
                    pattern: "{controller=Home}/{action=Index}/{id?}");
            });
        }
    }
}




PM> Add-Migration InitialCreate
Build started...
Build succeeded.
To undo this action, use Remove-Migration.
PM> Update-Database
Build started...
Build succeeded.
Done.
PM>





