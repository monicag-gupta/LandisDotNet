npm install â€“g typescript





hello.ts


class Greeting { 
   greet():void { 
      console.log("Hello World!!!") 
   } 
} 
var obj = new Greeting(); 
obj.greet();





function disp_details(id:number,name:string,mail_id?:string) { 
   console.log("ID:", id); 
   console.log("Name",name); 
   
   if(mail_id!=undefined)  
   console.log("Email Id",mail_id); 
}
disp_details(123,"John");
disp_details(111,"mary","mary@xyz.com");






function addNumbers(...nums:number[]) {  
   var i;   
   var sum:number = 0; 
   
   for(i = 0;i<nums.length;i++) { 
      sum = sum + nums[i]; 
   } 
   console.log("sum of the numbers",sum) 
} 
addNumbers(1,2,3) 
addNumbers(10,10,10,10,10)





function calculate_discount(price:number,rate:number = 0.50) { 
   var discount = price * rate; 
   console.log("Discount Amount: ",discount); 
} 
calculate_discount(1000) 
calculate_discount(1000,0.30)




var msg = function() { 
   return "hello world";  
} 
var res = function(a:number,b:number) { 
   return a*b;  
}; 
function res2(a:number,b:number){
 		return a+b;
}
console.log(res(12,2)) 
console.log(res2(12,2))
console.log(msg())








var myFunction = new Function("a", "b", "return a * b"); 
//Function is a constructor used here
var x = myFunction(4, 3); 
console.log(x);





var foo1 = (x:number)=>10 + x 
console.log(foo1(100))  
    //outputs 110

var foo2 = (x:number)=> {    
   x = 20 + x; 
   console.log(x)  
} 
foo2(100) 
// outputs 120







function disp(s1:string):void; 
//function disp(s1:number):void;
function disp(n1:number,s1:string):void; 

function disp(x:any,y?:any):void { 
   console.log(x); 
   console.log(y); 
} 
disp("abc") 
disp(1,"xyz");
//disp(1);







Number object: Properties:
MAX_VALUE
The largest possible value a number in JavaScript can have 1.7976931348623157E+308.
MIN_VALUE
The smallest possible value a number in JavaScript can have 5E-324.
NaN
Equal to a value that is not a number.
NEGATIVE_INFINITY
A value that is less than MIN_VALUE.
POSITIVE_INFINITY
A value that is greater than MAX_VALUE.
prototype
A static property of the Number object. Use the prototype property to assign new properties and methods to the Number object in the current document.
constructor
Returns the function that created this object's instance. By default, this is the Number object.






Numbers: Methods:
toExponential()
Forces a number to display in exponential notation, even if the number is in the range in which JavaScript normally uses standard notation.
toFixed()
Formats a number with a specific number of digits to the right of the decimal.
toLocaleString()
Returns a string value version of the current number in a format that may vary according to a browser's local settings.
toPrecision()
Defines how many total digits (including digits to the left and right of the decimal) to display of a number. A negative precision will throw an error.
toString()
Returns the string representation of the number's value. The function is passed the radix, an integer between 2 and 36 specifying the base to use for representing numeric values.
valueOf()
Returns the number's primitive value.





Example:

console.log("TypeScript Number Properties: "); 
console.log("Maximum value that a number variable can hold: " + Number.MAX_VALUE); 
console.log("The least value that a number variable can hold: " + Number.MIN_VALUE); 
console.log("Value of Negative Infinity: " + Number.NEGATIVE_INFINITY); 
console.log("Value of Positive Infinity:" + Number.POSITIVE_INFINITY);
var month = 0 
if( month<=0 || month >12) { 
   month = Number.NaN 
   console.log("Month is "+ month) 
} else { 
   console.log("Value Accepted as: " + month) 
}









console.log("TypeScript Number Properties: "); 
console.log("Maximum value that a number variable can hold: " + Number.MAX_VALUE); 
console.log("The least value that a number variable can hold: " + Number.MIN_VALUE); 
console.log("Value of Negative Infinity: " + Number.NEGATIVE_INFINITY); 
console.log("Value of Positive Infinity:" + Number.POSITIVE_INFINITY);
function monthName(month:number){
    console.log("\nFunction starts: \nValue given is: " + month)
    if( month<=0 || month >12) { 
        month = Number.NaN 
        console.log("Month is "+ month) 
    } 
    else { 
        console.log("Value Accepted as: " + month) 
        switch(month){
            case 1:
                console.log("Month is January"); break; 
            case 2:
                console.log("Month is February"); break; 
            case 3:
                console.log("Month is March"); break; 
            default:
                console.log("Month is valid"); break; 
        }
    }
}
function monthNumOfDays(month:number){
    console.log("\nFunction starts: \nValue given is: " + month)
    if( month<=0 || month >12) { 
        month = Number.NaN 
        console.log("Month is "+ month) 
    } 
    else { 
        console.log("Value Accepted as: " + month) 
        switch(month){
            case 2:
                console.log("Month Days are 28 or 29"); break; 
            case 1:
            case 3:
            case 5:
            case 7:
            case 8:
            case 10:
            case 12:
                console.log("Month Days are 31"); break; 
            case 2:
            case 4:
            case 6:
            case 9:
            case 11:
                console.log("Month Days are 30"); break; 
            default:
                console.log("Month is invalid"); break; 
        }
    }
}
console.log("\n\nMonth Name function called:");
monthName(2);
monthName(15);
console.log("\n\nMonth Number of Days function called:");
monthNumOfDays(6);
monthNumOfDays(8);
monthNumOfDays(14);
monthNumOfDays(2);









String: Property:
Constructor
Returns a reference to the String function that created the object.
Length
Returns the length of the string.
Prototype
The prototype property allows you to add properties and methods to an object.


String : Methods:
charAt() : Returns the character at the specified index.
charCodeAt() : Returns a number indicating the Unicode value of the character at the given index.
concat() : Combines the text of two strings and returns a new string.
indexOf()   Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.
lastIndexOf() : Returns the index within the calling String object of the last occurrence of the specified value, or -1 if not found.
localeCompare() : Returns a number indicating whether a reference string comes before or after or is the same as the given string in sort order.
match() : Used to match a regular expression against a string.
replace() : Used to find a match between a regular expression and a string, and to replace the matched substring with a new substring.
search() : Executes the search for a match between a regular expression and a specified string.
slice() : Extracts a section of a string and returns a new string.
split() : Splits a String object into an array of strings by separating the string into substrings.
substr() : Returns the characters in a string beginning at the specified location through the specified number of characters.
substring() : Returns the characters in a string between two indexes into the string.
toLocaleLowerCase() : The characters within a string are converted to lower case while respecting the current locale.
toLocaleUpperCase() : The characters within a string are converted to upper case while respecting the current locale.
toLowerCase() : Returns the calling string value converted to lower case.
toString() : Returns a string representing the specified object.
toUpperCase() : Returns the calling string value converted to uppercase.
valueOf() : Returns the primitive value of the specified object.






var mystr="Hello World to you all!";
console.log(mystr.toLowerCase());
console.log(mystr.toUpperCase());
console.log(mystr.substring(7));
console.log(mystr.charAt(4));
console.log(mystr.indexOf("o"));
console.log(mystr.lastIndexOf("o"));
console.log(mystr.split(" ").length);
console.log("All words are:");
var a=mystr.split(" ");
var i;
for(i=0;i<a.length;i++){
    console.log(a[i] + " with length: " + a[i].length);
}








function disp(name:string|string[]) { 
   if(typeof name == "string") { 
      console.log(name) 
   } else { 
      var i;  
      for(i = 0;i<name.length;i++) { 
         console.log(name[i])
      } 
   } 
} 
disp("mark") 
console.log("Printing names array....") 
disp(["Mark","Tom","Mary","John"])







interface IPerson { 
   firstName:string, 
   lastName:string, 
   sayHi: ()=>string 
} 
var customer:IPerson = { 
   firstName:"Tom",
   lastName:"Hanks", 
   sayHi: ():string =>{return "Hi there"} 
} 
console.log("Customer Object ") 
console.log(customer.firstName) 
console.log(customer.lastName) 
console.log(customer.sayHi())  
var employee:IPerson = { 
   firstName:"Jim",
   lastName:"Blakes", 
   sayHi: ():string =>{return "Hello!!!"} 
} 
console.log("Employee  Object ") 
console.log(employee.firstName);
console.log(employee.lastName);
















