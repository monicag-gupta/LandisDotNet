npm install â€“g typescript





hello.ts


class Greeting { 
   greet():void { 
      console.log("Hello World!!!") 
   } 
} 
var obj = new Greeting(); 
obj.greet();





function disp_details(id:number,name:string,mail_id?:string) { 
   console.log("ID:", id); 
   console.log("Name",name); 
   
   if(mail_id!=undefined)  
   console.log("Email Id",mail_id); 
}
disp_details(123,"John");
disp_details(111,"mary","mary@xyz.com");






function addNumbers(...nums:number[]) {  
   var i;   
   var sum:number = 0; 
   
   for(i = 0;i<nums.length;i++) { 
      sum = sum + nums[i]; 
   } 
   console.log("sum of the numbers",sum) 
} 
addNumbers(1,2,3) 
addNumbers(10,10,10,10,10)





function calculate_discount(price:number,rate:number = 0.50) { 
   var discount = price * rate; 
   console.log("Discount Amount: ",discount); 
} 
calculate_discount(1000) 
calculate_discount(1000,0.30)




var msg = function() { 
   return "hello world";  
} 
var res = function(a:number,b:number) { 
   return a*b;  
}; 
function res2(a:number,b:number){
 		return a+b;
}
console.log(res(12,2)) 
console.log(res2(12,2))
console.log(msg())








var myFunction = new Function("a", "b", "return a * b"); 
//Function is a constructor used here
var x = myFunction(4, 3); 
console.log(x);





var foo1 = (x:number)=>10 + x 
console.log(foo1(100))  
    //outputs 110

var foo2 = (x:number)=> {    
   x = 20 + x; 
   console.log(x)  
} 
foo2(100) 
// outputs 120







function disp(s1:string):void; 
//function disp(s1:number):void;
function disp(n1:number,s1:string):void; 

function disp(x:any,y?:any):void { 
   console.log(x); 
   console.log(y); 
} 
disp("abc") 
disp(1,"xyz");
//disp(1);







Number object: Properties:
MAX_VALUE
The largest possible value a number in JavaScript can have 1.7976931348623157E+308.
MIN_VALUE
The smallest possible value a number in JavaScript can have 5E-324.
NaN
Equal to a value that is not a number.
NEGATIVE_INFINITY
A value that is less than MIN_VALUE.
POSITIVE_INFINITY
A value that is greater than MAX_VALUE.
prototype
A static property of the Number object. Use the prototype property to assign new properties and methods to the Number object in the current document.
constructor
Returns the function that created this object's instance. By default, this is the Number object.






Numbers: Methods:
toExponential()
Forces a number to display in exponential notation, even if the number is in the range in which JavaScript normally uses standard notation.
toFixed()
Formats a number with a specific number of digits to the right of the decimal.
toLocaleString()
Returns a string value version of the current number in a format that may vary according to a browser's local settings.
toPrecision()
Defines how many total digits (including digits to the left and right of the decimal) to display of a number. A negative precision will throw an error.
toString()
Returns the string representation of the number's value. The function is passed the radix, an integer between 2 and 36 specifying the base to use for representing numeric values.
valueOf()
Returns the number's primitive value.





Example:

console.log("TypeScript Number Properties: "); 
console.log("Maximum value that a number variable can hold: " + Number.MAX_VALUE); 
console.log("The least value that a number variable can hold: " + Number.MIN_VALUE); 
console.log("Value of Negative Infinity: " + Number.NEGATIVE_INFINITY); 
console.log("Value of Positive Infinity:" + Number.POSITIVE_INFINITY);
var month = 0 
if( month<=0 || month >12) { 
   month = Number.NaN 
   console.log("Month is "+ month) 
} else { 
   console.log("Value Accepted as: " + month) 
}


