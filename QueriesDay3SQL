SELECT city, state, COUNT (customer_id) as customer_count
FROM sales.customers 
--where COUNT (customer_id)>5 --where customer_count>5
--state='NY'
GROUP BY  state,  city having COUNT (customer_id)>12
ORDER BY state,CITY;



SELECT
    customer_id,
    YEAR (order_date),
    COUNT (order_id) order_count
FROM
    sales.orders
GROUP BY
    customer_id,
    YEAR (order_date)
HAVING
    COUNT (order_id) >= 2
ORDER BY
    customer_id;



SELECT
    category_id,
    MAX (list_price) max_list_price,
    MIN (list_price) min_list_price
FROM
    production.products
GROUP BY
    category_id
HAVING
    MAX (list_price) > 4000 OR MIN (list_price) < 500;
    
    
    
    
    
    
    
    
    
    
 



CREATE TABLE CUSTOMERS( 
   ID   INT              NOT NULL, 
   NAME VARCHAR (20)     NOT NULL, 
   AGE  INT              NOT NULL, 
   ADDRESS  CHAR (25) , 
   SALARY   DECIMAL (18, 2),        
   PRIMARY KEY (ID));


INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY) VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );
INSERT INTO CUSTOMERS VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );
INSERT INTO CUSTOMERS VALUES 
 	(3, 'kaushik', 23, 'Kota', 2000.00 );
 	(4, 'Chaitali', 25, 'Mumbai', 6500.00 );
 	(5, 'Hardik', 27, 'Bhopal', 8500.00 );
 	(6, 'Komal', 22, 'MP', 4500.00 );
 	(7, 'Muffy', 24, 'Indore', 10000.00 );
INSERT INTO CUSTOMERS VALUES (11, 'Mahesh', 28, 'Delhi', 1700.00 );




 CREATE TABLE ORDERS (
   ID          INT        NOT NULL,
   DATE        DATETIME, 
   CUSTOMER_ID INT references CUSTOMERS(ID),
   AMOUNT    DECIMAL (18, 2),  
   PRIMARY KEY (ID)
);



INSERT INTO ORDERS VALUES (100, '2020-10-08',  3, 1500.00  );
INSERT INTO ORDERS VALUES (104, '2020-10-08',  11, 1500.00  );

INSERT INTO ORDERS VALUES 
 	(101, '2020-10-20',  2, 1560.00 ),
 	(102, '2020-10-08',  3, 3000.00  ),
 	(103, '2020-05-20', 4, 2060.00);




select distinct CUSTOMER_ID from orders;
select CUSTOMER_ID from orders group by CUSTOMER_ID;






create table tbl1(A char(3),B char(3));
create table tbl2(B char(3),C char(3));

insert into tbl1 values('A1','B1'),('A2','B2'),('A3','B3');
insert into tbl2 values('B1','C1'),('B3','C3'),('B5','C5');

select * from tbl1;
select * from tbl2;






Let us join the two tables in our SELECT statement as follows:
Method 1:
SELECT CUSTOMERS.ID, NAME, AGE, AMOUNT 
   FROM CUSTOMERS, ORDERS 
   WHERE  CUSTOMERS.ID = ORDERS.CUSTOMER_ID 
Method 2:
 SELECT A.ID, A.NAME, A.AGE, B.AMOUNT 
      FROM CUSTOMERS A join  ORDERS B on A.ID = B.Customer_ID






It is noticeable that the join is performed in the WHERE clause. 
Several operators can be used to join tables, such as =, <, >, <>, <=, >=, !=, BETWEEN, LIKE, and NOT; they can all be used to join tables. 
However, the most common operator is the equal symbol.
MS SQL Server Join Types −
There are different types of joins available in MS SQL Server −
INNER JOIN − Returns rows when there is a match in both tables.
LEFT JOIN − Returns all rows from the left table, even if there are no matches in the right table.
RIGHT JOIN − Returns all rows from the right table, even if there are no matches in the left table.
FULL JOIN − Returns rows when there is a match in one of the tables.
SELF JOIN − This is used to join a table to itself as if the table were two tables, temporarily renaming at least one table in the MS SQL Server statement.
CARTESIAN JOIN − Returns the Cartesian product of the sets of records from the two or more joined tables.







SELECT  CUSTOMERS.ID, NAME, AMOUNT, DATE
   FROM CUSTOMERS
   LEFT JOIN ORDERS
   ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;

SELECT  CUSTOMERS.ID, NAME, AMOUNT, DATE
   FROM CUSTOMERS
   RIGHT JOIN ORDERS
   ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;






 SELECT  CUSTOMERS.ID, NAME, AMOUNT, DATE
   FROM CUSTOMERS
   FULL JOIN ORDERS
   ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;








 create table emp7(eid int, mid int, sal int);
 insert into emp7 values(101,201,10000),(201,301,20000),(102,202,11000),
 (202,301, 21000),(301,null,30000);
 --what is the sal of manager of 102
 select t2.sal from emp7 t1 join emp7 t2 on t1.mid=t2.eid where t1.eid=102;
 select t2.sal from emp7 t2 where t2.eid=
 (select t1.mid from emp7 t1 where t1.eid=102);
 
 
 
 
 

 SELECT  a.ID, a.name,  a.SALARY, b.NAME, b.SALARY
   FROM CUSTOMERS a, CUSTOMERS b
   WHERE a.SALARY < b.SALARY order by a.ID;
   
   
   
   
   
   
  



