CREATE or alter PROCEDURE SelectCustomerstabledata 
(@agemin Int, @agemax Int, @rownum int output)
AS 
Begin
    SELECT * FROM Customers where age between @agemin and @agemax;
     select @rownum= @@ROWCOUNT;
End

--Executing the procedure
Begin
DECLARE @count INT;

EXECUTE SelectCustomerstabledata 
    @agemax = 25, @agemin = 22,
    @rownum = @count OUTPUT;
--EXECUTE SelectCustomerstabledata 
--    22, 25, @count OUTPUT;

SELECT @count AS 'Number of Customers found';
End






drop table if exists products;
CREATE TABLE products (
	product_id INT IDENTITY (1, 1) PRIMARY KEY,
	product_name VARCHAR (255) NOT NULL,
	brand_id INT NOT NULL,
	category_id INT NOT NULL,
	model_year SMALLINT NOT NULL,
	list_price DECIMAL (10, 2) NOT NULL);

INSERT INTO products
VALUES 
 	('Test product1', 1, 1, 2018, 599),
 	('Test product2', 2, 2, 2016, 699),
 	('Test product3', 3, 3, 2018, 799),
 	('Test product4', 4, 4, 2015, 899);


select * from products;














Begin
DECLARE 
    @product_name VARCHAR(MAX), 
    @list_price   DECIMAL;

DECLARE cursor_product CURSOR
FOR SELECT 
        product_name,   list_price
    FROM   products;

OPEN cursor_product;

FETCH NEXT FROM cursor_product INTO 
    @product_name,   @list_price;

WHILE @@FETCH_STATUS = 0
    BEGIN
        PRINT @product_name + CAST(@list_price AS varchar);
        FETCH NEXT FROM cursor_product INTO 
            @product_name,  @list_price;
    END;

CLOSE cursor_product;

DEALLOCATE cursor_product;
End











CREATE TABLE product_audits(
    change_id INT IDENTITY PRIMARY KEY,
    product_id INT NOT NULL,
    product_name VARCHAR(255) NOT NULL,
    brand_id INT NOT NULL,
    category_id INT NOT NULL,
    model_year SMALLINT NOT NULL,
    list_price DEC(10,2) NOT NULL,
    updated_at DATETIME NOT NULL,
    operation CHAR(3) NOT NULL,
    CHECK(operation = 'INS' or operation='DEL')
);



CREATE TRIGGER trg_product_audit
ON products
AFTER INSERT, DELETE
AS
BEGIN
    SET NOCOUNT ON;
    INSERT INTO product_audits(
        product_id,  product_name, brand_id,  category_id,  model_year, list_price, updated_at,  operation
    )
    SELECT
        i.product_id, product_name, brand_id, category_id, model_year,  i.list_price,  GETDATE(),  'INS'
    FROM  inserted i
    UNION ALL
    SELECT
        d.product_id,  product_name, brand_id, category_id, model_year,  d.list_price, GETDATE(),  'DEL'
    FROM  deleted d;
END





INSERT INTO products(
    product_name, brand_id, category_id, model_year,  list_price
)
VALUES (
    'Test product', 1, 1, 2018, 599
);



SELECT      *  FROM   product_audits;




DELETE FROM 
     products
WHERE 
    product_id = 5;


SELECT      *  FROM   product_audits;






Drop trigger trg_product_audit





CREATE TABLE products_duplicate (
product_name VARCHAR (255) NOT NULL,
pstatus varchar(255)
);


CREATE or Alter TRIGGER trg_products 
ON products
INSTEAD OF INSERT
AS
BEGIN
	SET NOCOUNT ON;
	if exists (select inserted.product_name from inserted 
		where inserted.product_name in(SELECT product_name
		FROM  products))
	Begin
		INSERT INTO products_duplicate ( 
			product_name, pstatus
		)
		SELECT
			i.product_name, 'Duplicate Entry'
		FROM
			inserted i
	End
	else
	Begin
		Insert into products(product_name, brand_id, category_id,
			model_year, list_price)
		select product_name, brand_id, category_id,
			model_year, list_price from Inserted;
	End
END




Select * from products
insert into products values('Test product6', 5, 5, 2019, 799)
Select * from products
--Duplicate Entry:
insert into products values('Test product6', 5, 5, 2019, 799)
Select * from products
Select * from products_duplicate






















