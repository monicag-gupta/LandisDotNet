ajax_info.txt

AJAX
AJAX is not a programming language.

AJAX is a technique for accessing web servers from a web page.

AJAX stands for Asynchronous JavaScript And XML.




Index.html

<!DOCTYPE html>
<html>	<body>
<div id="demo">
<h1>The XMLHttpRequest Object</h1>
<button type="button" onclick="loadDoc()">Change Content</button>
</div>	<script>
function loadDoc() {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      document.getElementById("demo").innerHTML =
      this.responseText;
    }	  };
  xhttp.open("GET", "ajax_info.txt", true);
  xhttp.send();
}		</script>
</body>	</html>



Index.cshtml

<div>
    <h1 id="demo">The XMLHttpRequest Object</h1>
    <button type="button" onclick="loadDoc()">Change Content</button>
</div>
<script>
    function loadDoc() {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                document.getElementById("demo").innerHTML =
                    this.responseText;
            }
        };
        xhttp.open("GET", "ajax_info.txt", true);
        xhttp.send();
    }</script>
    
    
    
    
    
    
    
    jQuery AJAX Methods:
    $.ajax() : Performs an async AJAX request
$.ajaxPrefilter() : Handle custom Ajax options or modify existing options before each request is sent and before they are processed by $.ajax()
$.ajaxSetup() : Sets the default values for future AJAX requests
$.ajaxTransport() : Creates an object that handles the actual transmission of Ajax data
$.get() : Loads data from a server using an AJAX HTTP GET request
$.getJSON()	 : Loads JSON-encoded data from a server using a HTTP GET request
$.getScript() : Loads (and executes) a JavaScript from a server using an AJAX HTTP GET request
$.param() : Creates a serialized representation of an array or object (can be used as URL query string for AJAX requests)
$.post() : Loads data from a server using an AJAX HTTP POST request
ajaxComplete() : Specifies a function to run when the AJAX request completes
ajaxError() : Specifies a function to run when the AJAX request completes with an error
ajaxSend() : Specifies a function to run before the AJAX request is sent
ajaxStart() : Specifies a function to run when the first AJAX request begins
ajaxStop() : Specifies a function to run when all AJAX requests have completed
ajaxSuccess() : Specifies a function to run when an AJAX request completes successfully
load() : Loads data from a server and puts the returned data into the selected element
serialize() : Encodes a set of form elements as a string for submission
serializeArray() : Encodes a set of form elements as an array of names and values





The jQuery load() method is a simple, but powerful AJAX method.
The load() method loads data from a server and puts the returned data into the selected element.
Syntax:
$(selector).load(URL,data,callback);
The required URL parameter specifies the URL you wish to load.
URL − The URL of the server-side resource to which the request is sent. It could be a CGI, ASP, JSP, or PHP script which generates data dynamically or out of a database.
The optional data parameter specifies a set of query-string key/value pairs to send along with the request.
data − This optional parameter represents an object whose properties are serialized into properly encoded parameters to be passed to the request. If specified, the request is made using the POST method. If omitted, the GET method is used.
The optional callback parameter is the name of a function to be executed after the load() method is completed.
callback − A callback function invoked after the response data has been loaded into the elements of the matched set. The first parameter passed to this function is the response text received from the server and second parameter is the status code.








Index.html
<!DOCTYPE html>
<html>
<head>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<script>
$(document).ready(function(){
    $("button").click(function(){
        $("#div1").load("demo_test.txt #p1");
    });
});
</script>
</head>
<body>
<div id="div1"><h2>Let jQuery AJAX Change This Text</h2></div>
<button>Get External Content</button>
</body>
</html>






Index.cshtml



    <script src="~/js/jquery.js"></script>
    <script>
        $(document).ready(function () {
            $("button").click(function () {
                $("#div1").load("ajax_info.txt");
            });
        });
    </script>

<div><h2 id ="div1">Let jQuery AJAX Change This Text</h2></div>
    <button>Get External Content</button>





ajax_info.txt

AJAX
AJAX is not a programming language.

<p id="p1"> AJAX is a technique for accessing web servers from a web page.</p>

AJAX stands for Asynchronous JavaScript And XML.



Index.cshtml



    <script src="~/js/jquery.js"></script>
    <script>
        $(document).ready(function () {
            $("button").click(function () {
                $("#div1").load("ajax_info.txt #p1");
            });
        });
    </script>

<div><h2 id ="div1">Let jQuery AJAX Change This Text</h2></div>
    <button>Get External Content</button>


 
 
 
 
 
 jQuery - AJAX get() and post() Methods:
 The jQuery get() and post() methods are used to request data from the server with an HTTP GET or POST request.
HTTP Request: GET vs. POST
Two commonly used methods for a request-response between a client and server are: GET and POST.
GET - Requests data from a specified resource
POST - Submits data to be processed to a specified resource
GET is basically used for just getting (retrieving) some data from the server. Note: The GET method may return cached data.
POST can also be used to get some data from the server. However, the POST method NEVER caches data, and is often used to send data along with the request.






The $.get() method requests data from the server with an HTTP GET request.
Syntax:
$.get(URL,callback);
The required URL parameter specifies the URL you wish to request.
The optional callback parameter is the name of a function to be executed if the request succeeds.





Index.cshtml




    <script src="~/js/jquery.js"></script>
    <script>
        $(document).ready(function () {
            $("button").click(function () {
                $.get("ajax_info.txt", function (data, status) {
                    alert("Data: " + data + "\nStatus: " + status);
                    $("#div1").text("Data: " + data + "\nStatus: " + status);
                });
            });
        });
    </script>

    <div id="div1"></div>
    <button>Send an HTTP GET request to a page and get the result back</button>












Getting JSON data
There would be a situation when server would return JSON string against your request. JQuery utility function getJSON() parses the returned JSON string and makes the resulting string available to the callback function as first parameter to take further action.
Syntax
$(selector).getJSON(url,data,success(data,status,xhr))
Parameter	
url : Required. Specifies the url to send the request to
Data :  Optional. Specifies data to be sent to the server
success(data,status,xhr) : Optional. Specifies the function to run if the request succeeds
Additional parameters:
data - contains the data returned from the server.
status - contains a string containing request status ("success", "notmodified", "error", "timeout", or "parsererror").
xhr - contains the XMLHttpRequest object





Result.json
{
"name": "Mr Jay",
"sal" : "50000",
"add": "India"
}



Index.cshtml


    <script src="~/js/jquery.js"></script>
    <script>
        $(document).ready(function () {
            $("button").click(function () {
                $.getJSON("Result.json", function (result) {
                    $.each(result, function (i, field) {
                        $("#div1").append("Key is: " + i + ": Value is: " + field + "<br>");
                    });
                });
            });
        });
    </script>


    <button>Get JSON data</button>
    <div id="div1"></div>










Exercise:
For an array of JSON values, load the JSON through AJAX using Jquery, and display each record in table format.

Result.json
  {
    "Emp1": {
      "name": "Mr Jay",
      "sal": "50000",
      "add": "India"
    },
    "Emp2": {
      "name": "Mr Jay2",
      "sal": "20000",
      "add": "USA"
    }
  }



Method1:

    <script src="~/js/jquery.js"></script>
    <script>
        $(document).ready(function () {
            $("button").click(function () {
                var tblData="";
                $.getJSON("Result.json", function (result) {
                    $.each(result, function (i, field) {
                        tblData = tblData + "<tr><td>"+i+"</td>";
                        //$("#div1").append("Key is: " + i + ": Value is: " + field + "<br>");
                        $.each(field, function (i2, field2){
                            //$("#div1").append("Key is: " + i2 + ": Value is: " + field2 + "<br>");
                            tblData = tblData + "<td>" + field2 + "</td>";
                        });
                    tblData = tblData + "</tr>";
                    $("#div1").append(tblData);
                    });
                });
            });
        });
    </script>


    <button>Get JSON data</button>
    <div>
        <table id="div1" border="1">
            <tr><th>EmpID</th><th>Name</th><th>Sal</th><th>Address</th></tr>
        </table>
    </div>





Method2:

    <script src="~/js/jquery.js"></script>
    <script>
        $(document).ready(function () {
            $("button").click(function () {
                var tblData="";
                $.getJSON("Result.json", function (result) {
                $.each(result, function (i, field) {
                        tblData = tblData + "<tr><td>"+i+"</td>";
                        //$("#div1").append("Key is: " + i + ": Value is: " + field + "<br>");
                        
                    var obj = JSON.parse(JSON.stringify(field));
                   // alert(obj);
                    //    //$.each(field, function (i2, field2){
                    //        //$("#div1").append("Key is: " + i2 + ": Value is: " + field2 + "<br>");
                    tblData = tblData + "<td>" + obj.name + "</td>" + "<td>" + obj.sal + "</td>" + "<td>" + obj.add + "</td>";
                    //    //});
                    tblData = tblData + "</tr>";
                    $("#div1").append(tblData);
                    });
                });
            });
        });
    </script>


    <button>Get JSON data</button>
    <div>
        <table id="div1" border="1">
            <tr><th>EmpID</th><th>Name</th><th>Sal</th><th>Address</th></tr>
        </table>
    </div>









